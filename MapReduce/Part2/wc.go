package main

import (
	"fmt"
	"mapreduce"
	"os"
	"strconv"
	"strings"
	"unicode"
)

//
// The map function is called once for each file of input. The first
// argument is the name of the input file, and the second is the
// file's complete contents. You should ignore the input file name,
// and look only at the contents argument. The return value is a slice
// of key/value pairs.
//
func mapF(filename string, contents string) []mapreduce.KeyValue {
	// Your code here (Part II).
	//go through the contents : generate word : freq pairs

	//1.FINAL return value
	//var keyValue_Array []KeyValue
	//keyValue_Array = append(keyValue_Array, m)

	//2. create map <word,frequency>  freq := make(map[string]int)
	//EXAMPLE   word_freq := make(map[string]int)
	// range string slice gives index, word pairs
	// index is not needed, so use blank identifier _
	//for _, word := range words {
	// check if word (the key) is already in the map
	//	_, ok := word_freq[word]
	// if true add 1 to frequency (value of map)
	// else start frequency at 1
	//	if ok == true {
	//		word_freq[word] += 1
	//	} else {
	//		word_freq[word] = 1
	//	}
	//}

	//3. Get words from string

	f := func(c rune) bool {
		return !unicode.IsLetter(c) && !unicode.IsNumber(c)
	}
	//  fmt.Printf("Fields are: %q", strings.FieldsFunc("  foo1;bar2,baz3...", f))
	words := strings.FieldsFunc(contents, f)
	word_freq := make(map[string]int)

	for _, word := range words {
		//low_word := strings.ToLower(word)
		// check if word (the key) is already in the map
		_, ok := word_freq[word]
		// if true add 1 to frequency (value of map)
		// else start frequency at 1
		if ok == true {
			word_freq[word] += 1
		} else {
			word_freq[word] = 1
		}
	}

	var keyValue_Array []mapreduce.KeyValue

	for k, v := range word_freq {
		//Add to KeyValue array
		//fmt.Printf("\nSAN: Key: %s Value: %d", k, v)
		keyValue_Array = append(keyValue_Array, mapreduce.KeyValue{k, strconv.Itoa(v)})
	}

	return keyValue_Array
}

//
// The reduce function is called once for each key generated by the
// map tasks, with a list of all the values created for that key by
// any map task.
//
func reduceF(key string, values []string) string {
	// Your code here (Part II).
	fmt.Printf("SANREDUCE: %s - ", key)
	fmt.Println("SANREDUCE: ", values)
	// for key : add all the values in values array and return as a string
	sum := 0
	for _, val := range values {
		i, _ := strconv.Atoi(val)
		sum = sum + i
	}
	//fmt.Printf("\nSAND: Sum is of key %s is %d", key, sum)
	return strconv.Itoa(sum)
}

// Can be run in 3 ways:
// 1) Sequential (e.g., go run wc.go master sequential x1.txt .. xN.txt)
// 2) Master (e.g., go run wc.go master localhost:7777 x1.txt .. xN.txt)
// 3) Worker (e.g., go run wc.go worker localhost:7777 localhost:7778 &)
func main() {
	if len(os.Args) < 4 {
		fmt.Printf("%s: see usage comments in file\n", os.Args[0])
	} else if os.Args[1] == "master" {
		var mr *mapreduce.Master
		if os.Args[2] == "sequential" {
			mr = mapreduce.Sequential("wcseq", os.Args[3:], 3, mapF, reduceF)
		} else {
			mr = mapreduce.Distributed("wcseq", os.Args[3:], 3, os.Args[2])
		}
		mr.Wait()
	} else {
		mapreduce.RunWorker(os.Args[2], os.Args[3], mapF, reduceF, 100, nil)
	}
}
